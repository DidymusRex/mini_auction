#
# mini_auction system setup
# REF: https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-16-04
#
# RPi Zero W
# ----------------------------------------------------------
# install lastest Raspian (Buster) to an SD card and boot up the Pi
# log in as pi/raspberry
sudo raspi-config
#    a. new password (record)
#    b. set up WiFi
#    c. set up Locale
#    d. set up time zone
#    e. enable camera
#    f. enable SSH
#    g. expand filesystem
#    h. set up keyboard as US
sudo reboot

#
# log in as pi
#
# make sure system is up to date
# ----------------------------------------------------------
sudo apt-get update
sudo apt-get upgrade

#
# create auction user and install needed packages
# ----------------------------------------------------------
sudo adduser auction (record password)
sudo add-apt-repository ppa:certbot/certbot
sudo apt install python3-pip python3-dev python3-setuptools python3-venv nginx git
sudo apt install build-essential libssl-dev libffi-dev libglib2.0-dev libgirepository1.0-dev libcairo2-dev
sudo apt install libcairo2 python-cairo sqlite3 python-certbot-nginx
sudo reboot
 
# ----------------------------------------------------------
#
# ----------------------------------------------------------

#
# log in as auction
# update .bashrc
# create .bash_aliases
# ----------------------------------------------------------
#
#
# Get the source from github and install the module dependencies
# ----------------------------------------------------------
cd ~
git clone https://github.com/DidymusRex/mini_auction.git
git config --global user.email "d.rex@didymusrex.net"
git config --global user.name "Didymus Rex"


#
# create project directory and virtual environment
# ----------------------------------------------------------
cd ~/mini_auction
python3 -m venv --symlinks --clear Auction_env
source Auction_env/bin/activate
pip install wheel
pip install -r requirements.txt

#
# copy or link the auction.service file to /etc/systemd/systemd
# ----------------------------------------------------------
# sudo ln -s /etc/systemd/system/auction.service ~/mini_auction/auction.service
sudo cp /home/auction/mini_auction/setup/auction.service /etc/systemd/system/auction.service


#
# Set up uWSGI to start at boot
# ----------------------------------------------------------
sudo systemctl start auction
sudo systemctl enable auction

#
# Configure nginx
# Copy or link nginx.auction to /etc/nginx/sites-available/auction
# ----------------------------------------------------------
# sudo ln -s /etc/nginx/sites-available/auction ~/mini_auction/nginx.auction
sudo cp /home/auction/mini_auction/setup/nginx.auction /etc/nginx/sites-available/auction
sudo ln -s /etc/nginx/sites-available/auction /etc/nginx/sites-enabled/auction


# check for errors in the nginx file
sudo nginx -t

# restart nginx
sudo systemctl restart nginx

# set up ssh cert
# sudo certbot --nginx -d poc.mini-auction.net
sudo certbot --certonly --nginx -d poc.mini-auction.net

# log locations
# sudo less /var/log/nginx/error.log: checks the Nginx error logs.
# sudo less /var/log/nginx/access.log: checks the Nginx access logs.
# sudo journalctl -u nginx: checks the Nginx process logs.
# sudo journalctl -u auction: checks your Flask appâ€™s uWSGI logs.
# ----------------------------------------------------------



# ----------------------------------------------------------
# R E V I E W   T H I S   P R O C E S S
# ----------------------------------------------------------
# as pi create /home/pi/startup_mailer.py

#
# edit /etc/rc.local
#
# add line 
python /home/pi/startup_mailer.py

#IMPORTANT NOTES:
# - Congratulations! Your certificate and chain have been saved at:
#   /etc/letsencrypt/live/your_domain/fullchain.pem
#   Your key file has been saved at:
#   /etc/letsencrypt/live/your_domain/privkey.pem
#   Your cert will expire on 2018-07-23. To obtain a new or tweaked
#   version of this certificate in the future, simply run certbot again
#   with the "certonly" option. To non-interactively renew *all* of
#   your certificates, run "certbot renew"
# - Your account credentials have been saved in your Certbot
#   configuration directory at /etc/letsencrypt. You should make a
#   secure backup of this folder now. This configuration directory will
#   also contain certificates and private keys obtained by Certbot so
#   making regular backups of this folder is ideal.
# - If you like Certbot, please consider supporting our work by:
#
#   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
#   Donating to EFF:                    https://eff.org/donate-le

