#
# mini_auction system setup
# REF: https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-uwsgi-and-nginx-on-ubuntu-16-04
#
# RPi Zero W
# ----------------------------------------------------------
# install lastest Raspian (Buster) to an SD card and boot up the Pi
# log in as pi/raspberry
sudo raspi-config
#    a. new password (record)
#    b. set up WiFi
#    c. set up Locale
#    d. set up time zone
#    e. enable camera
#    f. enable SSH
#    g. expand filesystem
#    h. set up keyboard as US
sudo reboot

#
# log in as pi
#
# make sure system is up to date
# ----------------------------------------------------------
sudo apt-get update
sudo apt-get upgrade

#
# create auction user and install needed packages
# ----------------------------------------------------------
sudo adduser auction (record password)
sudo apt install python3-pip python3-dev python3-setuptools python3-venv nginx git
sudo apt install build-essential libssl-dev libffi-dev libglib2.0-dev libgirepository1.0-dev libcairo2-dev
sudo apt install libcairo2 python-cairo
sudo reboot
 
# ----------------------------------------------------------
#
# ----------------------------------------------------------

#
# log in as auction
# update .bashrc
# create .bash_aliases
# ----------------------------------------------------------
#
#
# Get the source from github and install the module dependencies
# ----------------------------------------------------------
cd ~
git clone https://github.com/DidymusRex/mini_auction.git
pip install wheel
pip install -r requirements.txt

#
# create project directory and virtual environment
# ----------------------------------------------------------
cd ~/mini_auction
python3 -m venv --symlinks --clear Auction_env
source Auction_env/bin/activate

#
# copy or link the auction.service file to /etc/systemd/systemd
# ----------------------------------------------------------
# sudo ln -s /etc/systemd/system/auction.service ~/mini_auction/auction.service
sudo cp /home/auction/mini_auction/setup/auction.service /etc/systemd/system/auction.service


#
# Set up uWSGI to start at boot
# ----------------------------------------------------------
sudo systemctl start auction
sudo systemctl enable auction

#
# Configure nginx
# Copy or link nginx.auction to /etc/nginx/sites-available/auction
# ----------------------------------------------------------
# sudo ln -s /etc/nginx/sites-available/auction ~/mini_auction/nginx.auction
sudo cp /home/auction/mini_auction/setup/nginx.auction /etc/nginx/sites-available/auction
sudo ln -s /etc/nginx/sites-available/auction /etc/nginx/sites-enabled/auction


# check for errors in the nginx file
sudo nginx -t

# restart nginx
sudo systemctl restart nginx

# log locations
# sudo less /var/log/nginx/error.log: checks the Nginx error logs.
# sudo less /var/log/nginx/access.log: checks the Nginx access logs.
# sudo journalctl -u nginx: checks the Nginx process logs.
# sudo journalctl -u auction: checks your Flask app’s uWSGI logs.
# ----------------------------------------------------------



# ----------------------------------------------------------
# R E V I E W   T H I S   P R O C E S S
# ----------------------------------------------------------
as pi create /home/pi/startup_mailer.py

#
# edit /etc/rc.local
#
add line 
python /home/pi/startup_mailer.py




# copied from above referenced web site

Step 7 — Securing the Application
To ensure that traffic to your server remains secure, let’s get an SSL certificate for your domain. There are multiple ways to do this, including getting a free certificate from Let’s Encrypt, generating a self-signed certificate, or buying one from another provider and configuring Nginx to use it by following Steps 2 through 6 of  How to Create a Self-signed SSL Certificate for Nginx in Ubuntu 18.04. We will go with option one for the sake of expediency.

First, add the Certbot Ubuntu repository:

sudo add-apt-repository ppa:certbot/certbot
You’ll need to press ENTER to accept.

Next, install Certbot’s Nginx package with apt:

sudo apt install python-certbot-nginx
Certbot provides a variety of ways to obtain SSL certificates through plugins. The Nginx plugin will take care of reconfiguring Nginx and reloading the config whenever necessary. To use this plugin, type the following:

sudo certbot --nginx -d your_domain -d www.your_domain
This runs certbot with the --nginx plugin, using -d to specify the names we’d like the certificate to be valid for.

If this is your first time running certbot, you will be prompted to enter an email address and agree to the terms of service. After doing so, certbot will communicate with the Let’s Encrypt server, then run a challenge to verify that you control the domain you’re requesting a certificate for.

If that’s successful, certbot will ask how you’d like to configure your HTTPS settings.

Output
Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
-------------------------------------------------------------------------------
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
-------------------------------------------------------------------------------
Select the appropriate number [1-2] then [enter] (press 'c' to cancel):
Select your choice then hit ENTER. The configuration will be updated, and Nginx will reload to pick up the new settings. certbot will wrap up with a message telling you the process was successful and where your certificates are stored:

Output
IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/your_domain/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/your_domain/privkey.pem
   Your cert will expire on 2018-07-23. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the "certonly" option. To non-interactively renew *all* of
   your certificates, run "certbot renew"
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

If you followed the Nginx installation instructions in the prerequisites, you will no longer need the redundant HTTP profile allowance:

sudo ufw delete allow 'Nginx HTTP'
To verify the configuration, let’s navigate once again to your domain, using https://:

https://your_domain
You should see your application output once again, along with your browser’s security indicator, which should indicate that the site is secured.

